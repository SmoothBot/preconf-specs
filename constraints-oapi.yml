openapi: 3.0.0
info:
  version: "0.1.0"
  title: "Constraints API"
  description: "API governing interaction between preconfers and gateways"
  contact:
    name: Jack McPherson
    url: https://jmcph4.dev
    email: jack@jmcph4.dev
paths:
  /constraints/v0/relay/delegate:
    post:
      tags:
        - Constraints API
      summary: "Endpoint for Proposer to delegate preconfirmation rights, or more accurately, constraint submission rights to a Gateway"
      description: "
A proposer can delegate preconfirmations rights by signing a `Delegate` message with their proposer BLS private key. A `SignedDelegation` binds the proposer public key to the delegate public key and a slasher contract until after the `valid_until` slot elapses. During this time, the delegate can submit constraints to the relay on behalf of the proposer.

    - `proposer`: The BLS public key of the proposer who is delegating preconfirmation rights
    
    - `delegate`: The BLS public key of the gateway who is receiving preconfirmation rights
    
    - `slasher`: The address of a slasher contract containing a slashing function to penalize a proposer who has violated constraints (i.e., reneged on a preconf)
    
    - `valid_until`: slot number (inclusive) that a `SignedDelegation` is considered valid until
    
    - `metadata`: Additional opaque byte array reserved for and interpreted by the slashing function and/or the gateway (e.g., gas limit, blob limit, chain ID, preconfirmation type)

While the Constraints API aims to be unopinionated about how slasher contracts are implemented, it's assumed that `SignedDelegation` messages are part of the evidence used to slash a proposer.
      "
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/SignedDelegation'
      responses:
        "200":
          description: "OK"
          content: {}
  /constraints/v0/relay/constraints:
    post:
      tags:
        - Constraints API
      summary: "Endpoint for Proposer or Gateway to submit a batch of signed constraints to the Relay"
      description: "Endpoint for submitting a batch of constraints to the relay. The constraints are expected to be signed by a `delegate` BLS private key, whose corresponding public key is specified in a `SignedDelegation` message.

      For each `Preconfirmation` the delegate signs, they will need to create a matching `Constraint`. Collectively, a `SignedConstraints` message is posted to the Relay.

    - `commitmentType`: unsigned 64-bit number between `0` and `0xffffffffffffffff` that represents the type of the proposer commitment

    - `payload`: opaque byte array whose interpretation is dependent on the `commitmentType`

    Particularly each `commitmentType` would have a corresponding specification that defines:

    - A schema for a `Preconfirmation` and `SignedPreconfirmation` message

    - How a `Constraint.payload` is interpreted

    - How a `Constraint.payload` is created given a `SignedPreconfirmation`

    - The ordering of `Constraints[]`

    - How to build a valid block given a `ConstraintsMessage`

    - How to generate proofs of constraint validity
      
    - how to verify proofs of constraint validity
      "
        requestBody:
            required: true
            content:
                application/json:
                    schema:
                        type: array
                        items:
                            $ref: '#/components/schemas/SignedConstraints'
        responses:
            "200":
              description: "OK"
              content: {}
    get:
      tags:
        - Constraints API
      summary: "Endpoint to retrieve the signed constraints for a given slot"
      description: "The Relay should only return signed constraints that were signed by the proposer or a gateway that was delegated to by the proposer."
      parameters:
        - name: slot
          in: query
          schema:
              $ref: "../beacon-apis/types/primitive.yaml#/Uint64"
      responses:
        "200":
          description: "OK"
          content:
                application/json:
                    schema:
                        type: array
                        items:
                            $ref: '#/components/schemas/SignedConstraints'
  /constraints/v0/relay/header_with_proofs/{slot}/{parent_hash}/{pubkey}:
    get:
      tags:
        - Constraints API
      summary: "Endpoint for Proposer to request a builder bid with proof of constraint validity"
      description: "
The `VersionedSignedBuilderBidWithProofs` schema extends `VersionedSignedBuilderBid` from the original builder specs to include proofs of constraint validity. Without leaking the block's contents, a Proposer can verify that the block satisfies the constraints by checking the `proofs` against the block header. To support a wide range of constraint types with different proving requirements, `ConstraintProofs` is left open-ended to allow for future flexibility.

    - `commitmentTypes`: list of unsigned 64-bit numbers between `0` and `0xffffffffffffffff` that represents the type of the proposer commitment (not required to be homogenous)

    - `payloads`: list of opaque byte arrays whose interpretation is dependent on the `commitmentTypes`

Requirements:

    - Each `commitmentType` has a spec that defines how builders can generate `proofs` for their block

    - Each `commitmentType` has a spec that defines how relays and proposers can verify `proofs`

    - When serializing, the `proofs` field must be present in `data`, at the same level of `signature` and `message`. See the example below.

    - The length of `commitmentTypes` and `payloads` must be the same

      "
      parameters:
        - name: slot
          in: path
          required: true
          schema: 
              $ref: "../beacon-apis/types/primitive.yaml#/Uint64"
        - name: parent_hash
          in: path
          required: true
          schema:
            type: string
        - name: pubkey
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
              schema:
                  $ref: '#/components/schemas/VersionedSignedBuilderBidWithProofs'
  /constraints/v0/relay/delegations:
    get:
      tags:
        - Constraints API
      summary: "Endpoint to retrieve the signed delegations for the proposer of a given slot, if it exists."
      description: "Return the active delegations for the proposer of this slot, if they exist. The Relay should only return signed delegations that were signed by the proposer."
      parameters:
        - name: slot
          in: query
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "OK"
          content:
              application/json:
                  schema:
                      type: array
                      items:
                          $ref: '#/components/schemas/SignedDelegation'
  /constraints/v0/relay/constraints_stream:
    get:
      tags:
        - Constraints API
      summary: "Endpoint to retrieve an SSE stream of signed constraints"
      description: "This endpoint is a streaming endpoint meant to reduce round-trip latency via SSE, allowing Relays to push new constraints to Builders in realtime. The Relay should only return signed constraints that were signed by the proposer or a gateway that was delegated to by the proposer."
      parameters:
        - name: slot
          in: query
          schema:
              $ref: "../beacon-apis/types/primitive.yaml#/Uint64"
      responses:
        "200":
          description: "OK"
          content:
              application/json:
                  schema:
                      type: object
                      properties:
                          event:
                              type: string
                          data:
                              type: array
                              items:
                                  $ref: '#/components/schemas/SignedConstraints'
  /constraints/v0/relay/blocks_with_proofs:
    post:
      tags:
        - Constraints API
      summary: "Endpoint for Builder to submit a block with proofs of constraint validity to the Relay"
      description: "
The `VersionedSubmitBlockRequestWithProofs` schema extends `VersionedSubmitBlockRequest` from the original relay specs to include proofs of constraint validity. A Builder can protect their block's content while proving that the block satisfies the constraints by including proofs in the `VersionedSubmitBlockRequestWithProofs` message. To support a wide range of constraint types with different proving requirements, `ConstraintProofs` is left open-ended to allow for future flexibility.

    - `commitmentTypes`: list of unsigned 64-bit numbers between `0 `and `0xffffffffffffffff` that represents the type of the proposer commitment (not required to be homogenous)

    - `payloads`: list of opaque byte arrays whose interpretation is dependent on the commitmentTypes

    - If `cancellations` is true, the Builder is signaling to opt into bid cancellations

Requirements:

 - Each `commitmentType` has a spec that defines how builders can generate `proofs` for their block

 - Each `commitmentType` has a spec that defines how relays and proposers can verify `proofs`

 - The length of `commitmentTypes` and `payloads` must be the same
      "
      requestBody:
            required: true
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/VersionedSubmitBlockRequestWithProofs'
      responses:
        "200":
          description: "OK"
          content: {}
components:
  schemas:
    SignedDelegation:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/Delegation'
        signature:
            $ref: "../beacon-apis/types/primitive.yaml#/Signature"
      required:
        - message
        - signature
    Delegation:
      type: object
      properties:
        proposer:
            $ref: "../beacon-apis/types/primitive.yaml#/Pubkey"
        delegate:
            $ref: "../beacon-apis/types/primitive.yaml#/Pubkey"
        slasher:
          type: string
          description: Ethereum address
        valid_until:
          type: integer
          description: Slot
        metadata:
          type: string
          description: Arbitrary bytes
      required:
        - proposer
        - delegate
        - slasher
        - valid_until
        - metadata
    SignedConstraints:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ConstraintsMessage'
        signature:
            $ref: "../beacon-apis/types/primitive.yaml#/Signature"
      required:
        - message
        - signature
    ConstraintsMessage:
      type: object
      properties:
        delegate:
            $ref: "../beacon-apis/types/primitive.yaml#/Pubkey"
        slot:
            $ref: "../beacon-apis/types/primitive.yaml#/Uint64"
        contraints:
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
      required:
        - delegate
        - slot
        - contraints
    Constraint:
      type: object
      properties:
        commitmentType:
          type: integer
          description: Commitment type
        payload:
          type: string
          description: Arbitrary bytes
      required:
        - commitmentType
        - payload
    ConstraintProofs:
      type: object
      properties:
        commitmentTypes:
          type: array
          items:
            type: integer
            format: uint64
          maxItems: MAX_CONSTRAINTS_PER_SLOT
        payloads:
          type: array
          items:
            type: string
            format: byte
          maxItems: MAX_CONSTRAINTS_PER_SLOT
    Bellatrix.SubmitBlockRequest:
      $ref: "../relay-specs/types/bellatrix/requests.yaml#/Bellatrix/SubmitBlockRequest"
    Capella.SubmitBlockRequest:
      $ref: "../relay-specs/types/capella/requests.yaml#/Capella/SubmitBlockRequest"
    Deneb.SubmitBlockRequest:
      $ref: "../relay-specs/types/deneb/requests.yaml#/Deneb/SubmitBlockRequest"
    Electra.SubmitBlockRequest:
      $ref: "../relay-specs/types/electra/requests.yaml#/Electra/SubmitBlockRequest"
    Bellatrix.SubmitBlockRequestWithProofs:
      allOf:
        - $ref: "../relay-specs/types/bellatrix/requests.yaml#/Bellatrix/SubmitBlockRequest"
        - type: object
          properties:
            proofs:
                $ref: '#/components/schemas/Constraint'
    Capella.SubmitBlockRequestWithProofs:
      allOf:
        - $ref: "../relay-specs/types/capella/requests.yaml#/Capella/SubmitBlockRequest"
        - type: object
          properties:
            proofs:
                $ref: '#/components/schemas/Constraint'
    Deneb.SubmitBlockRequestWithProofs:
      allOf:
        - $ref: "../relay-specs/types/deneb/requests.yaml#/Deneb/SubmitBlockRequest"
        - type: object
          properties:
            proofs:
                $ref: '#/components/schemas/Constraint'
    Electra.SubmitBlockRequestWithProofs:
      allOf:
        - $ref: "../relay-specs/types/electra/requests.yaml#/Electra/SubmitBlockRequest"
        - type: object
          properties:
            proofs:
                $ref: '#/components/schemas/Constraint'
    VersionedSubmitBlockRequestWithProofs:
      oneOf:
        - $ref: '#/components/schemas/Bellatrix.SubmitBlockRequestWithProofs'
        - $ref: '#/components/schemas/Capella.SubmitBlockRequestWithProofs'
        - $ref: '#/components/schemas/Deneb.SubmitBlockRequestWithProofs'
        - $ref: '#/components/schemas/Electra.SubmitBlockRequestWithProofs'
    Bellatrix.SignedBuilderBid:
      $ref: "../builder-specs/types/bellatrix/requests.yaml#/Bellatrix/SignedBuilderBid"
    Capella.SignedBuilderBid:
      $ref: "../builder-specs/types/capella/requests.yaml#/Capella/SignedBuilderBid"
    Deneb.SignedBuilderBid:
      $ref: "../builder-specs/types/deneb/requests.yaml#/Deneb/SignedBuilderBid"
    Bellatrix.SignedBuilderBidWithProofs:
      allOf:
        - $ref: "../builder-specs/types/bellatrix/bid.yaml#/Bellatrix/SignedBuilderBid"
        - type: object
          properties:
            proofs:
                $ref: '#/components/schemas/Constraint'
    Capella.SignedBuilderBidWithProofs:
      allOf:
        - $ref: "../builder-specs/types/capella/bid.yaml#/Capella/SignedBuilderBid"
        - type: object
          properties:
            proofs:
                $ref: '#/components/schemas/Constraint'
    Deneb.SignedBuilderBidWithProofs:
      allOf:
        - $ref: "../builder-specs/types/deneb/bid.yaml#/Deneb/SignedBuilderBid"
        - type: object
          properties:
            proofs:
                $ref: '#/components/schemas/Constraint'
    VersionedSignedBuilderBidWithProofs:
      oneOf:
        - $ref: '#/components/schemas/Bellatrix.SignedBuilderBidWithProofs'
        - $ref: '#/components/schemas/Capella.SignedBuilderBidWithProofs'
        - $ref: '#/components/schemas/Deneb.SignedBuilderBidWithProofs'

